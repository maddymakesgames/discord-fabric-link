import net.fabricmc.loom.task.RemapJarTask

plugins {
	id 'fabric-loom' version '0.4-SNAPSHOT'
	id 'maven-publish'
	id "com.github.johnrengelman.shadow" version "6.0.0"
}

repositories {
	jcenter()
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

dependencies {
	//to change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modApi "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	modApi "me.sargunvohra.mcmods:autoconfig1u:${project.autoconfig}"
	include "me.sargunvohra.mcmods:autoconfig1u:${project.autoconfig}"

	/*
	 Weird stuff with this
	 For the user mixin to apply this has to not be a mod implementation / api (and possibly for production to work)
	 but if its not mod then in a dev environment the netty relocate won't do anything
	 so basically dev environment doesn't work
	*/
	implementation "com.discord4j:discord4j-core:${project.discord4j}"
	shadow "com.discord4j:discord4j-core:${project.discord4j}"

	// PSA: Some older mods, compiled on Loom 0.2.1, might have outdated Maven POMs.
	// You may need to force-disable transitiveness on them.
}

processResources {
	inputs.property "version", project.version

	from(sourceSets.main.resources.srcDirs) {
		include "fabric.mod.json"
		expand "version": project.version
	}

	from(sourceSets.main.resources.srcDirs) {
		exclude "fabric.mod.json"
	}
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
	options.encoding = "UTF-8"
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = "sources"
	from sourceSets.main.allSource
}

tasks.jar.enabled = false
tasks.remapJar.enabled = false

shadowJar {
	destinationDirectory = file("${buildDir}/tmp/allJar")
	configurations = [project.configurations.shadow]
	relocate 'io.netty', 'shaded.io.netty'

	//Exclude META-INF entries of shaded deps
	exclude 'META-INF/**'
	from('.') {
		include 'LICENSE.md'
		include 'NOTICE.txt'
		include 'licenses/**'
	}
	minimize()
}

task remapShadowJar(type: RemapJarTask) {
	dependsOn shadowJar
	input = shadowJar.archiveFile
	addNestedDependencies.set(true)
}

build {
	dependsOn remapShadowJar
}


// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			// add all the jars that should be included when publishing to maven
			artifact(remapJar) {
				builtBy remapJar
			}
			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}
		}
	}

	// select the repositories you want to publish to
	repositories {
		// uncomment to publish to the local maven
		// mavenLocal()
	}
}